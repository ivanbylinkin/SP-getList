$.fn.getList=function(e){var t=new $.Deferred;if(e.listNames)return $.fn.getMultiLists(e);var i=$.merge(e.fields,["checkedout","ID"]),s="<ViewFields>",a={};e.types||(e.types=[],a=null);for(var n=0;n<i.length;n++){var r=i[n],l=e.types[n];s+="<FieldRef Name='"+r+"' />",l&&(a["ows_"+r]={mappedName:r,objectType:l})}s+="</ViewFields>",e.CAMLViewFields=s,e.CAMLQuery=e.query,e.mapping=a;var o=$.fn.getList.defaults;for(var d in o)e[d]&&(o[d]=e[d]);var u=$().SPServices.SPGetListItemsJson(o);return $.when(u).done(function(){t.resolve(this),e.completefunc&&e.completefunc(this)}),t},$.fn.getMultiLists=function(e){for(var t=[],i=new $.Deferred,s=0;s<e.listNames.length;s++){{new $.Deferred}if("array"==$.type(e.fields[s]))var a=$.merge($.merge([],e.fields[s]),["checkedout","ID"]);else var a=$.merge($.merge([],e.fields),["checkedout","ID"]);var n="<ViewFields>",r={},l=[];e.types?(l=e.types,"array"==$.type(e.types[s])&&(l=e.types[s])):r=null;for(var o=0;o<a.length;o++){var d=a[o],u=l[o];n+="<FieldRef Name='"+d+"' />",u&&(r["ows_"+d]={mappedName:d,objectType:u})}n+="</ViewFields>",e.CAMLViewFields=n,e.queries?e.queries[s]?e.CAMLQuery=e.queries[s]:alert("getList_error: more lists being queried than queries provided"):e.CAMLQuery=e.query,e.mapping=r;var p=$.fn.getList.defaults;p.listName=e.listNames[s];for(var c in p)e[c]&&(p[c]=e[c]);t.push($().SPServices.SPGetListItemsJson(p))}return $.when.apply($,t).done(function(){i.resolve(this),e.completefunc&&e.completefunc(this)}),i},$.fn.getListSimple=function(e){var t=$.merge(e.fields,["checkedout","ID"]),i="<ViewFields>",s={};e.types||(e.types=[]);for(var a=0;a<t.length;a++){var n=t[a],r=e.types[a];i+="<FieldRef Name='"+n+"' />",r&&(s["ows_"+n]={mappedName:n,objectType:r})}i+="</ViewFields>",e.CAMLViewFields=i,e.CAMLQuery=e.query,e.mappings=s;var l=$.fn.getListSimple.defaults;l.completefunc=function(t){e.data=$(t.responseXML).SPFilterNode("z:row").SPXmlToJson({mapping:e.mappings,includeAllAttrs:!0}),e.completefunc&&e.completefunc(e.data)};for(var o in l)e[o]&&(l[o]=e[o]);return $().SPServices(l),e.data},$.fn.getListColumns=function(e){var t=$.fn.getListColumns.defaults;t.completefunc=function(t){var i=[];$(t.responseXML).find("Fields > Field").each(function(){i.push({StaticName:$(this).attr("StaticName"),DisplayName:$(this).attr("DisplayName")})}),e.data=i};for(var i in t)e[i]&&(t[i]=e[i]);return $().SPServices(t),e.data},$.fn.getList.defaults={webURL:"",listName:"",viewName:"",CAMLQuery:"<Query><OrderBy Override='TRUE'><FieldRef Ascending='FALSE' Name='ID' /></OrderBy><Where><IsNotNull><FieldRef Name='ID' /></IsNotNull></Where></Query>",CAMLViewFields:"",CAMLRowLimit:5e3,CAMLQueryOptions:"",changeToken:"",contains:"",mapping:null,mappingOverrides:null,debug:!0},$.fn.getListSimple.defaults={webURL:"",operation:"GetListItems",async:!1,listName:"",CAMLViewFields:"",CAMLQuery:"<Query><OrderBy Override='TRUE'><FieldRef Ascending='FALSE' Name='ID' /></OrderBy><Where><IsNotNull><FieldRef Name='ID' /></IsNotNull></Where></Query>",CAMLRowLimit:5e3},$.fn.getListColumns.defaults={operation:"GetList",listName:"",async:!1},$.fn.getList.help="Using getList:\n\n $.fn.getList({ listName: YOURLIST, fields: [FIELD,FIELD,FIELD, etc] }); \n\n help on accessing data is available through $.fn.getList.help_access",$.fn.getList.help_access="In order to access the data please use this format\n\n$.when(YOURVARIABLE).done(function(){ var data = this.data; });\n\nInside the function you can see 4 values: changeToken, mapping, data, deletedIds.\n\nFor more info on these please see $.fn.getList.help_THEVALUE",$.fn.getList.help_changeToken="Passing this parameter back into getList will return all changes since your last call",$.fn.getList.help_mapping="The mapping used to parse the data into JSON. This mapping will include any specific overrides you specified as well as the automatically created mappings. You can pass this mapping into the function on subsequent calls to reduce overhead, though the function saves the mapping in a local data store for reuse.",$.fn.getList.help_data="The actual data return by getList",$.fn.getList.help_deletedIds="If this is call 2 or greater to getList, deletedIds will contain an array of IDs for list items which have been deleted since the prior call.",$.fn.getList.version="v3.0.2";
